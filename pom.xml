<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>foo.bar</groupId>
  <artifactId>integration-tests-with-maven3-failsafe-plugin-undestandig</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Integration Tests With Maven3 Failsafe Plugin Undestandig</name>

  <properties>
    <!-- Кодировка -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Java -->
    <java.version>1.7</java.version>

    <!-- Test -->
    <junit.version>4.11</junit.version>
    <failsafe.version>2.18.1</failsafe.version>
    <surefire.version>2.18.1</surefire.version>
    <!-- Кодировка отчета failsafe-->
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- Maven -->
    <maven-compiler.version>2.5.1</maven-compiler.version>

    <!-- ***** -->
    <!-- Sonar -->
    <!-- ***** -->
    <!-- Настройки для расчета покрытия кода тестами -->
    <sonar.jacoco.reportMissing.force.zero>true</sonar.jacoco.reportMissing.force.zero>
    <!-- Sonar/Jacoco integration. Note that these properties need to be defined outside the "coverage" profile
    because we want to be to able to execute mvn sonar:sonar without passing a profile -->
    <!-- Tells Sonar to use jacoco for coverage results -->
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <!-- Jacoco version to use -->
    <jacoco.version>0.6.3.201306030806</jacoco.version>
    <!-- The Sonar Jacoco Listener for JUnit to extract coverage details per test -->
    <sonar-jacoco-listeners.version>1.2</sonar-jacoco-listeners.version>
    <!-- Don't let Sonar execute tests. We will ask it to Maven -->
    <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
    <!-- The system property jacoco.outputDir needs to be override on the command line
    with an absolute path if you want to merge results from all modules.
    Example in a Jenkisn build where ${WORKSPACE} is defined and your project in the root directory of the workspace :
    mvn clean install -Prun-its,coverage -Djacoco.outputDir=${WORKSPACE}/target
    Note that unfortunately using the following does not work because of
     
    http://jira.codehaus.org/browse/SONAR-3427:
     
    <jacoco.outputDir>${session.executionRootDirectory}/target/</jacoco.outputDir>
    -->
    <jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
    <!-- Jacoco output file for UTs -->
    <jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>
    <!-- Tells Sonar where the Jacoco coverage result file is located for Unit Tests -->
    <sonar.jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPath>
    <!-- Jacoco output file for ITs -->
    <jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>
    <!-- Tells Sonar where the Jacoco coverage result file is located for Integration Tests -->
    <sonar.jacoco.itReportPath>${jacoco.outputDir}/${jacoco.out.it.file}</sonar.jacoco.itReportPath>

  </properties>

  <modules>
    <module>integration-test-with-unit-tests</module>
  </modules>

  <!-- Зависимости -->
  <dependencyManagement>
    <dependencies>
      <!-- Test -->
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler.version}</version>
          <configuration>
            <source>${java.version}</source>
            <target>${java.version}</target>
            <compilerArgument>-Xlint:all</compilerArgument>
            <showWarnings>true</showWarnings>
            <showDeprecation>true</showDeprecation>
          </configuration>
        </plugin>

        <!-- Явно подключили плугин для модульных тестов. Обычно он подклюается автоматом-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire.version}</version>
          <executions>
            <execution>
              <id>unit-tests</id>
              <phase>test</phase>
              <goals>
                <goal>test</goal>
              </goals>
              <configuration>
                <excludes>
                  <exclude>**/*Test.java</exclude>
                </excludes>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- Плугин  для интеграционных тестов -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${failsafe.version}</version>
          <executions>
            <execution>
              <id>integration-test</id>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
              <!-- По умолчанию плугин так и настроен -->
              <configuration>
                <skip>false</skip>
                <includes>
                  <include>**/*IT.java</include>
                </includes>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

<profiles>
  <profile>
    <id>coverage</id>
    <build>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire.version}</version>
          <configuration>
            <!-- Specific to generate mapping between tests and covered code -->
            <properties>
              <property>
                <name>listener</name>
                <value>org.sonar.java.jacoco.JUnitListener</value>
              </property>
            </properties>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${failsafe.version}</version>
          <configuration>
            <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>
            <!-- Specific to generate mapping between tests and covered code -->
            <properties>
              <property>
                <name>listener</name>
                <value>org.sonar.java.jacoco.JUnitListener</value>
              </property>
            </properties>
            <!-- Let's put failsafe reports with surefire to have access to tests failures/success reports in sonar -->
            <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco.version}</version>
          <executions>
            <!-- Prepares a variable, jacoco.agent.ut.arg, that contains the info to be passed to the JVM hosting the code being tested. -->
            <execution>
              <id>prepare-ut-agent</id>
              <phase>process-test-classes</phase>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
              <configuration>
                <destFile>${sonar.jacoco.reportPath}</destFile>
                <propertyName>jacoco.agent.ut.arg</propertyName>
                <append>true</append>
              </configuration>
            </execution>
            <!-- Prepares a variable, jacoco.agent.it.arg, that contains the info to be passed to the JVM hosting the code being tested. -->
            <execution>
              <id>prepare-it-agent</id>
              <phase>pre-integration-test</phase>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
              <configuration>
                <destFile>${sonar.jacoco.itReportPath}</destFile>
                <propertyName>jacoco.agent.it.arg</propertyName>
                <append>true</append>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
    <dependencies>
      <dependency>
        <groupId>org.codehaus.sonar-plugins.java</groupId>
        <artifactId>sonar-jacoco-listeners</artifactId>
        <version>${sonar-jacoco-listeners.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </profile>

  <!--
   This profile is used to launch integration tests with the failsafe plugin
   http://maven.apache.org/plugins/maven-failsafe-plugin/
  -->
  <profile>
    <id>run-its</id>
    <build>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <executions>
            <execution>
              <id>integration-test</id>
              <phase>integration-test</phase>
              <goals>
                <goal>integration-test</goal>
              </goals>
            </execution>
            <execution>
              <id>verify</id>
              <phase>verify</phase>
              <goals>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
  </profile>
</profiles>

</project>